#
# Copyright 2010, Cloudkick, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
EnsureSConsVersion(1, 1, 0)

import os
import sys
import os.path
from os.path import join as pjoin

import SCons
cwd = os.getcwd()
other_path = pjoin(cwd, 'other')

if other_path not in sys.path:
  sys.path.insert(0, other_path)

from site_scons.utils import copy_tree, copy_files, symlink, delete_paths

cwd = os.getcwd()
user_home_path = os.path.expanduser('~')

opts = Variables('build.py')
opts.Add(PathVariable('prefix', default = '/opt/cast_test',
                      help = 'Directory to install under',
                      validator = SCons.Variables.PathVariable.PathAccept))

env = Environment(options = opts, ENV = os.environ.copy())
opts.Update(env)

# Options
AddOption(
  '--remove-settings',
  dest = 'remove_settings',
  action = 'store_true',
  help = 'True to also remove cast settings directory upon uninstall'
)

AddOption(
  '--use-system-node',
  dest = 'use_system_node',
  action = 'store_true',
  help = 'True to use existing system node binary'
)

system_node_binary_path = None
remove_settings = False
if GetOption('use_system_node'):
  # TODO: Check for min version
  system_node_binary_path = env.WhereIs('node')

  if not system_node_binary_path:
    print 'Could not find system node binary. Make sure node is installed ' + \
          'or don\'t use the "--use-system-node" option.'
    sys.exit(1)
elif GetOption('remove_settings'):
  remove_settings = True
  settings_path = pjoin(user_home_path, '.cast1')

# Variables
node_tarball = 'deps/node.tar.gz'

prefix = env['prefix']
base_install_prefix = '%s/' % (prefix)
node_install_prefix = '%s/node/' % (prefix)
cast_install_prefix = '%s/cast/' % (prefix)
cast_data_prefix = '%s/cast/data/' % (prefix)

cast_config_path = pjoin(user_home_path, '.cast/config.json')
cast_paths = [ 'lib/', 'bin/', 'node_modules/' ]

default_config = """{
  "data_root": "%(data_root)s",
  "service_dir_enabled": "%(service_dir_enabled)s"
}
"""

cast_client_bin_path = pjoin('/usr/local/bin', 'cast')
cast_agent_bin_path = pjoin('/usr/local/bin', 'cast-agent')

node_binary_path = system_node_binary_path or pjoin(node_install_prefix, 'bin/node')
shebang_line = '#!%s' % (node_binary_path)

# Builder functions
def replace_lines(target, source, env):
  """"
  Update cast scripts shebang and base path line.
  """
  replacements = [
    [ '#!/usr/bin/env node', shebang_line ],
    [ "var path_setup = require('../lib/util/path_setup').path_setup;",
      "var path_setup = require('%slib/util/path_setup').path_setup;" %
      (cast_install_prefix) ]
  ]

  for file in [ 'cast', 'cast-agent' ]:
    file_path = pjoin(cast_install_prefix, 'bin', file)
    content = open(file_path, 'r').read()

    for replacement in replacements:
      content = content.replace(replacement[0], replacement[1])

    fp = open(file_path, 'w')
    fp.write(content)
    fp.close()

  return None

def populate_cast_config(target, source, env):
  """
  Populate default config.
  """
  target_path = str(target[0])

  config = default_config % { 'data_root': base_install_prefix,
                              'service_dir_enabled': 'services-enabled'
                            }
  fp = open(target_path, 'w')
  fp.write(config)
  fp.close()

  return None

# Install node
extract_node = env.Command('.extract_node', '', 'mkdir -p build/node/; tar -xzvf %s -C build/node/ --strip-components=1' % (node_tarball))
configure_node = env.Command('.configure_node', '', './configure --prefix=%s' % (node_install_prefix), chdir = 'build/node/')
install_node = env.Command('.build_node', '','make install', chdir = 'build/node/')

Depends(configure_node, extract_node)
Depends(install_node, configure_node)
install_node = [ extract_node, configure_node, install_node ]

replace_cast_lines = env.Command('.replace_lines', '', replace_lines)

# Copy cast files into the install prefix
copy_cast_files = env.Command('.%s' % (cast_install_prefix), cast_paths, copy_tree)


# Symlink Cast scripts to /usr/local/bin
symlink_cast_client = env.Command(cast_client_bin_path, '', 'ln -s %s %s' % (
                                  pjoin(cast_install_prefix, 'bin/cast'),
                                  cast_client_bin_path))
symlink_cast_agent = env.Command(cast_agent_bin_path, '', 'ln -s %s %s' % (
                                  pjoin(cast_install_prefix, 'bin/cast-agent'),
                                  cast_agent_bin_path))

# Populate default cast config
populate_cast_config = env.Command(cast_config_path, '', populate_cast_config)

Depends(symlink_cast_client, copy_cast_files)
Depends(symlink_cast_agent, copy_cast_files)
Depends(replace_cast_lines, copy_cast_files)

install_cast = [ copy_cast_files, replace_cast_lines, populate_cast_config,
                 symlink_cast_client, symlink_cast_agent]

# Cleanup
cleanup = env.Command('.build', 'build', 'rm -rf $SOURCE')

# Uninstall (delete base path and remove symlinks)
paths_to_delete = [ cast_client_bin_path, cast_agent_bin_path, base_install_prefix ]

if remove_settings:
  paths_to_delete.append(settings_path)

uninstall = env.Command('.uninstall', paths_to_delete, delete_paths)

install = []
if not system_node_binary_path:
  install.extend(install_node)
install.extend(install_cast)

# Aliases
env.Alias('install', install)
env.Alias('uninstall', uninstall)
env.Alias('cleanup', cleanup)
env.Alias('delete', 'uninstall')

env.Default(None)
