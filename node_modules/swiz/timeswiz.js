/*
 *  Copyright 2011 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var swiz = require('swiz');
var async = require('async');


// Mock set of serialization defs
var def = {'Node' : [
  ['id' , {'src' : 'hash_id', 'type' : 'string',
    'desc' : 'hash ID for the node'}],
  ['is_active' , {'src' : 'active', 'type' : 'bool',
    'desc' : 'is the node active?'}],
  ['name' , {'src' : 'get_name', 'type' : 'string', 'desc' : 'name' }],
  ['agent_name' , {'type': 'string'}],
  ['ipaddress' , {'src' : 'get_public_address', 'type' : 'ip'}],
  ['public_ips' , {'cache_key' : 'node_addrs_public', 'type' : 'list<ip>'}],
  ['state', {'enumerated' : {inactive: 0, active: 1, full_no_new_checks: 2}}]
]
};



/** Completely mock node object.
* @constructor
*/
function Node() {
  this.hash_id = '15245';
  this.active = true;
  this.agent_name = 'gl<ah';
  this.public_ips = ['123.45.55.44', '122.123.32.2'];
  this.state = 1;
}


/**
 * Dummy funct
 * @param {function(*,*)} callback junk.
 */
Node.prototype.get_name = function(callback) {
  callback(null, 'gggggg');
};


/**
 * Dummy funct
 * @param {function(*,*)} callback junk.
*/
Node.prototype.get_public_address = function(callback) {
  callback(null, '123.33.22.1');
};


/**
 * Dummy funct
 * @return {string} junk.
*/
Node.prototype.getSerializerType = function() {return 'Node';};

var n = new Node();
var s = new swiz.Swiz(def);

function timeXml() {
  var i = 0;
  console.time('xml');
  async.whilst(
    function() { return i < 100000; },
    function(callback) {
      i++;
      if (i % 300 === 0) {
        process.nextTick(function() {
          s.serialize(swiz.SERIALIZATION.SERIALIZATION_XML, 1, n, callback);
        });
      } else {
        s.serialize(swiz.SERIALIZATION.SERIALIZATION_XML, 1, n, callback);
      }
    },
    function(err) {
      console.timeEnd('xml');
      timeJson();
    }
  );
}

function timeJson() {
  var i = 0;
  console.time('json');
  async.whilst(
    function() { return i < 100000; },
    function(callback) {
      i++;
      if (i % 100 === 0) {
        process.nextTick(function() {
          s.serialize(swiz.SERIALIZATION.SERIALIZATION_JSON, 1, n, callback);
        });
      } else {
        s.serialize(swiz.SERIALIZATION.SERIALIZATION_JSON, 1, n, callback);
      }
    },
    function(err) {
      console.timeEnd('json');
    }
  );
}

timeXml();

/*
var i;
console.time('xml');
for (i = 0; i < 1000000; i++) {
  s.serialize(swiz.SERIALIZATION.ZERIALIZATION_XML, 1, n, function() {});
}
console.timeEnd('xml');

console.time('json');
for (i = 0; i < 1000000; i++) {
  s.serialize(swiz.SERIALIZATION.ZERIALIZATION_JSON, 1, n, function() {});
}
console.timeEnd('json');
*/
